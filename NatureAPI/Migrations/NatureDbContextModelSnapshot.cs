// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NatureAPI.Data;

#nullable disable

namespace NatureAPI.Migrations
{
    [DbContext(typeof(NatureDbContext))]
    partial class NatureDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NatureAPI.Model.Entities.Amenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Amenities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Baños"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Estacionamiento"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mirador"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Área de picnic"
                        });
                });

            modelBuilder.Entity("NatureAPI.Model.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Photos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Vista panorámica del Parque Nacional El Chico",
                            PlaceId = 1,
                            Url = "https://elsouvenir.com/wp-content/uploads/2018/08/Campamento-cerca-CDMX-Foto-Parque-Nacional-El-Chico-2.jpg"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Cascada de Basaseachic en temporada de lluvias",
                            PlaceId = 2,
                            Url = "https://chihuahua.gob.mx/sites/default/files/grupos/user599/cascada_de_basaseachi_2.jpg"
                        });
                });

            modelBuilder.Entity("NatureAPI.Model.Entities.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Accessible")
                        .HasColumnType("bit");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ElevationMeters")
                        .HasColumnType("int");

                    b.Property<double>("EntryFee")
                        .HasColumnType("float");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpeningHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Places");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Accessible = true,
                            Category = "Parque",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Uno de los parques nacionales más antiguos de México, ideal para senderismo y camping.",
                            ElevationMeters = 2600,
                            EntryFee = 40.0,
                            Latitude = 20.216699999999999,
                            Longitude = -98.7333,
                            Name = "Parque Nacional El Chico",
                            OpeningHours = "08:00-18:00"
                        },
                        new
                        {
                            Id = 2,
                            Accessible = false,
                            Category = "Cascada",
                            CreatedAt = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "La segunda cascada más alta de México, ubicada en la Sierra Tarahumara.",
                            ElevationMeters = 1800,
                            EntryFee = 30.0,
                            Latitude = 28.198599999999999,
                            Longitude = -108.2286,
                            Name = "Cascada de Basaseachic",
                            OpeningHours = "09:00-17:00"
                        });
                });

            modelBuilder.Entity("NatureAPI.Model.Entities.PlaceAmenity", b =>
                {
                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int>("AmenityId")
                        .HasColumnType("int");

                    b.HasKey("PlaceId", "AmenityId");

                    b.HasIndex("AmenityId");

                    b.ToTable("PlaceAmenities");

                    b.HasData(
                        new
                        {
                            PlaceId = 1,
                            AmenityId = 1
                        },
                        new
                        {
                            PlaceId = 1,
                            AmenityId = 2
                        },
                        new
                        {
                            PlaceId = 1,
                            AmenityId = 4
                        },
                        new
                        {
                            PlaceId = 2,
                            AmenityId = 3
                        });
                });

            modelBuilder.Entity("NatureAPI.Model.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("NatureAPI.Model.Entities.Trail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DistanceKm")
                        .HasColumnType("float");

                    b.Property<int>("EstimatedTimeMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("IsLoop")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Trails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Difficulty = "Media",
                            DistanceKm = 4.5,
                            EstimatedTimeMinutes = 120,
                            IsLoop = true,
                            Name = "Sendero Las Monjas",
                            Path = "20.2167,-98.7333;20.2200,-98.7300",
                            PlaceId = 1
                        },
                        new
                        {
                            Id = 2,
                            Difficulty = "Fácil",
                            DistanceKm = 2.0,
                            EstimatedTimeMinutes = 60,
                            IsLoop = false,
                            Name = "Sendero a la Cascada",
                            Path = "28.1986,-108.2286;28.2000,-108.2300",
                            PlaceId = 2
                        });
                });

            modelBuilder.Entity("NatureAPI.Model.Entities.Photo", b =>
                {
                    b.HasOne("NatureAPI.Model.Entities.Place", "Place")
                        .WithMany("Photos")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("NatureAPI.Model.Entities.PlaceAmenity", b =>
                {
                    b.HasOne("NatureAPI.Model.Entities.Amenity", "Amenity")
                        .WithMany("PlaceAmenities")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NatureAPI.Model.Entities.Place", "Place")
                        .WithMany("PlaceAmenities")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("NatureAPI.Model.Entities.Review", b =>
                {
                    b.HasOne("NatureAPI.Model.Entities.Place", "Place")
                        .WithMany("Reviews")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("NatureAPI.Model.Entities.Trail", b =>
                {
                    b.HasOne("NatureAPI.Model.Entities.Place", "Place")
                        .WithMany("Trails")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("NatureAPI.Model.Entities.Amenity", b =>
                {
                    b.Navigation("PlaceAmenities");
                });

            modelBuilder.Entity("NatureAPI.Model.Entities.Place", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("PlaceAmenities");

                    b.Navigation("Reviews");

                    b.Navigation("Trails");
                });
#pragma warning restore 612, 618
        }
    }
}
